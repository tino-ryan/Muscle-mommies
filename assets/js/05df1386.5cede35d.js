"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2390],{2748:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/files/database-987e6150fe2f1c692e26a4e044f66be7.pdf"},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>d});var i=s(6540);const r={},l=i.createContext(r);function t(e){const n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(l.Provider,{value:n},e.children)}},8728:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"Structure","title":"structure and progress","description":"structure","source":"@site/docs/Structure.md","sourceDirName":".","slug":"/Structure","permalink":"/Muscle-mommies/Structure","draft":false,"unlisted":false,"editUrl":"https://github.com/tino-ryan/Muscle-mommies/edit/gh-pages/docs/Structure.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Muscle-Mommies Development Guide","permalink":"/Muscle-mommies/Dev-guide"},"next":{"title":"Initial Design","permalink":"/Muscle-mommies/initial-design"}}');var r=s(4848),l=s(8453);const t={},d="structure and progress",c={},a=[{value:"structure",id:"structure",level:2},{value:"Database Structure",id:"database-structure",level:3},{value:"Backend Structure",id:"backend-structure",level:3},{value:"Frontend Structure",id:"frontend-structure",level:3},{value:"Hosting Choice",id:"hosting-choice",level:3},{value:"Google OAuth Integration",id:"google-oauth-integration",level:3},{value:"Progress",id:"progress",level:2},{value:". User Authentication",id:"-user-authentication",level:3},{value:". User Home &amp; Store Discovery",id:"-user-home--store-discovery",level:3},{value:". Search &amp; Filtering",id:"-search--filtering",level:3},{value:". Store Fronts &amp; Item Details",id:"-store-fronts--item-details",level:3},{value:". Reserved Items",id:"-reserved-items",level:3},{value:". Chat Interface",id:"-chat-interface",level:3},{value:". Store Ownner Dashboard",id:"-store-ownner-dashboard",level:3},{value:"Summary",id:"summary",level:2}];function o(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"structure-and-progress",children:"structure and progress"})}),"\n",(0,r.jsx)(n.h2,{id:"structure",children:"structure"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Deployment Diagram",src:s(9063).A+"",width:"569",height:"486"})}),"\n",(0,r.jsx)(n.h3,{id:"database-structure",children:"Database Structure"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:s(2748).A+"",children:"Database Design PDF"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Firestore is used as the database."}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Single Users collection"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"uid"})," (primary key)"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"name"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"email"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"role"})," (customer or storeOwner)"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"createdAt"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Why a single table/collection:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Simplifies user management and queries."}),"\n",(0,r.jsx)(n.li,{children:"All user roles are stored in one place for easier scalability."}),"\n",(0,r.jsx)(n.li,{children:"Our previous experience with Firebase Auth and Firestore on an earlier project worked very well, so we continued using it."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Pros:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Flexible and scalable."}),"\n",(0,r.jsx)(n.li,{children:"Easy to query by UID."}),"\n",(0,r.jsx)(n.li,{children:"Works seamlessly with Firebase Admin SDK."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Cons:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"No relational constraints (not suitable for complex relational queries)."}),"\n",(0,r.jsx)(n.li,{children:"Firestore pricing can grow with many reads/writes."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"backend-structure",children:"Backend Structure"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Created ",(0,r.jsx)(n.strong,{children:"MVC-style structure"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"models/"})," \u2013 Data models (e.g., User)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"controllers/"})," \u2013 API logic (signup/login)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"routes/"})," \u2013 Express routes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"config/"})," \u2013 Firebase setup and configuration"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why this structure:"}),(0,r.jsx)(n.br,{}),"\n","We avoided putting all logic in a single ",(0,r.jsx)(n.code,{children:"index.js"})," like in the last project because it was hard to maintain. Separating concerns ensures maintainable and testable code. Future features can follow the same structure."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Pros:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Easy to extend and maintain."}),"\n",(0,r.jsx)(n.li,{children:"Clear separation of logic and data."}),"\n",(0,r.jsx)(n.li,{children:"Scalable for additional features."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Cons:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Slightly more initial setup."}),"\n",(0,r.jsx)(n.li,{children:"Developers need to understand MVC separation."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"frontend-structure",children:"Frontend Structure"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["React app structured for ",(0,r.jsx)(n.strong,{children:"components, pages, and tests"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"SignupPage"})," and ",(0,r.jsx)(n.code,{children:"LoginPage"})," interact with backend via ",(0,r.jsx)(n.strong,{children:"axios"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Google OAuth integration uses Firebase client SDK and backend token verification."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Pros:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Clear separation of UI and backend."}),"\n",(0,r.jsx)(n.li,{children:"Google signup reduces friction for users."}),"\n",(0,r.jsx)(n.li,{children:"Compatible with future React components and routing."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Cons:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Requires proper CORS handling."}),"\n",(0,r.jsx)(n.li,{children:"Slightly more complex setup for token verification."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"hosting-choice",children:"Hosting Choice"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["We are using ",(0,r.jsx)(n.strong,{children:"Firebase Hosting"})," instead of Azure."]}),"\n",(0,r.jsx)(n.li,{children:"Reason: Our previous experience with Azure caused deployment issues; Firebase Hosting worked seamlessly in prior projects."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Pros:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Simple deployment and hosting."}),"\n",(0,r.jsx)(n.li,{children:"Integrated with Firebase Auth and Firestore."}),"\n",(0,r.jsx)(n.li,{children:"Free tier available for small projects."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Cons:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Less flexibility than a full cloud provider like Azure."}),"\n",(0,r.jsx)(n.li,{children:"Vendor lock-in with Firebase services."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"google-oauth-integration",children:"Google OAuth Integration"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Frontend obtains ",(0,r.jsx)(n.strong,{children:"Google ID token"})," via Firebase client SDK."]}),"\n",(0,r.jsxs)(n.li,{children:["Backend verifies token using ",(0,r.jsx)(n.strong,{children:"Firebase Admin"})," and creates user profile if it doesn't exist."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why:"}),(0,r.jsx)(n.br,{}),"\n","Provides seamless signup and login experience for users who prefer Google accounts."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Pros:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Faster signup for users."}),"\n",(0,r.jsx)(n.li,{children:"Reduces password management overhead."}),"\n",(0,r.jsx)(n.li,{children:"Trusted authentication via Google."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Cons:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Adds dependency on Google/Firebase."}),"\n",(0,r.jsx)(n.li,{children:"Requires handling token verification on the backend."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"progress",children:"Progress"}),"\n",(0,r.jsx)(n.h3,{id:"-user-authentication",children:". User Authentication"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Implemented ",(0,r.jsx)(n.strong,{children:"signup and login functionality"})," for both email/password and Google OAuth."]}),"\n",(0,r.jsxs)(n.li,{children:["Users are stored in ",(0,r.jsx)(n.strong,{children:"Firebase Authentication"})," and also have corresponding profiles in ",(0,r.jsx)(n.strong,{children:"Firestore"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Backend endpoints:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"POST /api/auth/signup"})," \u2013 Email/password signup."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"POST /api/auth/signup/google"})," \u2013 Google OAuth signup."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"POST /api/auth/login"})," \u2013 Email/password login."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why this structure:"}),(0,r.jsx)(n.br,{}),"\n","Separating ",(0,r.jsx)(n.strong,{children:"Auth"})," (Firebase Auth) and ",(0,r.jsx)(n.strong,{children:"user profile"})," (Firestore) ensures secure authentication while keeping user data structured and queryable.",(0,r.jsx)(n.br,{}),"\n","We added ",(0,r.jsx)(n.strong,{children:"email/password login"})," in addition to Google OAuth because it makes ",(0,r.jsx)(n.strong,{children:"testing and stubbing easier"})," during development."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Pros:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Secure authentication via Firebase."}),"\n",(0,r.jsx)(n.li,{children:"Easy integration with frontend."}),"\n",(0,r.jsx)(n.li,{children:"Profiles are easily extendable for additional user data."}),"\n",(0,r.jsx)(n.li,{children:"Email/password login improves testing workflow."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Cons:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Requires Firebase Admin setup and proper credential management."}),"\n",(0,r.jsx)(n.li,{children:"Slight complexity for synchronizing Auth and Firestore data."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"-user-home--store-discovery",children:". User Home & Store Discovery"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Users can view closest stores on a map interface with distance filtering."}),"\n",(0,r.jsx)(n.li,{children:"Backend calculates distances based on store locations and user coordinates."}),"\n",(0,r.jsx)(n.li,{children:"Frontend displays live map markers and updates dynamically as filters change."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Pros:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Improves discoverability for users."}),"\n",(0,r.jsx)(n.li,{children:"Intuitive UI with map visualisation."}),"\n",(0,r.jsx)(n.li,{children:"Distance filtering enhances user experience."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Cons:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Requires handling geolocation permissions."}),"\n",(0,r.jsx)(n.li,{children:"Map rendering and live updates can be performance-heavy at times, especially on low-end devices."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"-search--filtering",children:". Search & Filtering"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Users can search stores or items by name, size, catergory, or other attributes."}),"\n",(0,r.jsx)(n.li,{children:"Dynamic filters update results in real-time using backend queries."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Pro:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Fast and relevant results"}),"\n",(0,r.jsx)(n.li,{children:"Allows users to narrow down options quickly."}),"\n",(0,r.jsx)(n.li,{children:"Extensible for future filters (price, availability, ratings)."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Cons:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Backend queries must be optimised to avoid excessive reads in Firestore"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"-store-fronts--item-details",children:". Store Fronts & Item Details"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Store fronts display all items in a store."}),"\n",(0,r.jsxs)(n.li,{children:["Item detail page includes:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"IEnlarged image and full item description."}),"\n",(0,r.jsx)(n.li,{children:"Reservation button to reserve the item."}),"\n",(0,r.jsxs)(n.li,{children:["Equiry feature for contacting the store directly where users can enquire about:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"In-store collection (valid for one week)."}),"\n",(0,r.jsx)(n.li,{children:"Delivery"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Pros:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Clear, user-friendly item browsing."}),"\n",(0,r.jsx)(n.li,{children:"Reservation workflow increases engagement."}),"\n",(0,r.jsx)(n.li,{children:"Flexible options for item pickup/delivery."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Cons:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Requires synchronisation of the item availability across reservations."}),"\n",(0,r.jsx)(n.li,{children:"Backend must handle multiple reservation states and user notifications."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"-reserved-items",children:". Reserved Items"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Users can view items they have reserved."}),"\n",(0,r.jsx)(n.li,{children:"Includes quick links to item details and reservation status."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Pros:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Easy tracking of reserved items"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Cons:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Needs proper state management between frontend and backend."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"-chat-interface",children:". Chat Interface"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Real-time chat interface for user-store communication."}),"\n",(0,r.jsx)(n.li,{children:"Allows for users to ask questions about items, reservations, or deliveries."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Pros:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Enhances communication between users and store owners."}),"\n",(0,r.jsx)(n.li,{children:"Supports reservations and enquiries seamlessly."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Cons:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"requires backend Websocket or real-time database integration for live updates."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"-store-ownner-dashboard",children:". Store Ownner Dashboard"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["User dashboard/store managemnet","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Manage store items and inventory."}),"\n",(0,r.jsx)(n.li,{children:"Manage reservations and orders."}),"\n",(0,r.jsx)(n.li,{children:"Update item availabiltiy and basic store information."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Pros:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Centralised control for inventory and reservations."}),"\n",(0,r.jsx)(n.li,{children:"Allows store owners to manage their store effectively."}),"\n",(0,r.jsx)(n.li,{children:"Improves operational efficiency and reduces manual tracking."}),"\n",(0,r.jsx)(n.li,{children:"Provides a foundation for future analytics and reporting features."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Cons:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Lacks analytics and insights in this sprint (data-driven decisions not available yet)."}),"\n",(0,r.jsx)(n.li,{children:"Requires careful role-based access control to prevent unauthorized changes."}),"\n",(0,r.jsx)(n.li,{children:"Any reporting or insights will need to be added in future sprints."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u2705 User signup and login implemented (email/password + Google OAuth)."}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Single Firestore collection for all users."}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Backend structured with MVC for scalability."}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Frontend integrated with backend using axios."}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Firebase hosting used for deployment."}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 Main features implemented:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"User home & closest stores with live map."}),"\n",(0,r.jsx)(n.li,{children:"Search & filtering by size, category, etc."}),"\n",(0,r.jsx)(n.li,{children:"Store fronts & detailed item pages with reservation/enquiry."}),"\n",(0,r.jsx)(n.li,{children:"Reserved items management."}),"\n",(0,r.jsx)(n.li,{children:"Chat interface."}),"\n",(0,r.jsx)(n.li,{children:"Store owner dashboard"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Next Steps:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Implement logout and session management."}),"\n",(0,r.jsx)(n.li,{children:"Add user profile editing."}),"\n",(0,r.jsx)(n.li,{children:"Expand database for additional features (events, orders, etc.)."}),"\n",(0,r.jsx)(n.li,{children:"Improve testing coverage for frontend and backend."}),"\n",(0,r.jsx)(n.li,{children:"Optimize Firestore queries and map rendering for performance."}),"\n",(0,r.jsx)(n.li,{children:"Implement analytics for stores and admin"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},9063:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/deployment-diagram-ab9994be50fa5c519e23ee14a82cc377.png"}}]);
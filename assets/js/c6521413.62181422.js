"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1166],{2714:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>a,frontMatter:()=>c,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"git-methodology","title":"Git Methodology","description":"This document explains how our team will use a git during the ThriftFinder project.","source":"@site/docs/git-methodology.md","sourceDirName":".","slug":"/git-methodology","permalink":"/Muscle-mommies/git-methodology","draft":false,"unlisted":false,"editUrl":"https://github.com/tino-ryan/Muscle-mommies/edit/gh-pages/docs/git-methodology.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Version Control","permalink":"/Muscle-mommies/Version-control"},"next":{"title":"Muscle-Mommies Development Guide","permalink":"/Muscle-mommies/Dev-guide"}}');var s=i(4848),d=i(8453);const c={},t="Git Methodology",l={},o=[{value:"Branch Structure",id:"branch-structure",level:2},{value:"Why hybrid",id:"why-hybrid",level:2},{value:"Workflow Overview",id:"workflow-overview",level:2},{value:"Cloning the Repository",id:"cloning-the-repository",level:3},{value:"Updating Your Local Copy",id:"updating-your-local-copy",level:3},{value:"Creating a Feature Branch",id:"creating-a-feature-branch",level:3},{value:"Working on Your Branch",id:"working-on-your-branch",level:3},{value:"Pushing Changes",id:"pushing-changes",level:3},{value:"Merging a Feature into <code>dev</code>",id:"merging-a-feature-into-dev",level:3},{value:"Sprint Release Process",id:"sprint-release-process",level:2},{value:"Hotfix Process",id:"hotfix-process",level:2},{value:"Documentation Deployment (<code>docs</code> Branch)",id:"documentation-deployment-docs-branch",level:2},{value:"Updating Docs:",id:"updating-docs",level:3},{value:"Git Command Reference",id:"git-command-reference",level:2},{value:"Best Practices",id:"best-practices",level:2}];function h(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"git-methodology",children:"Git Methodology"})}),"\n",(0,s.jsxs)(n.p,{children:["This document explains how our team will use a git during the ThriftFinder project.",(0,s.jsx)(n.br,{}),"\n","We are using a ",(0,s.jsx)(n.strong,{children:"Hybrid GitHub Flow"})," with a dedicated ",(0,s.jsx)(n.code,{children:"dev"})," branch for sprint development and ",(0,s.jsx)(n.code,{children:"main"})," for stable releases.",(0,s.jsx)(n.br,{}),"\n","The ",(0,s.jsx)(n.code,{children:"docs"})," branch will be used to deploy documentation."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"branch-structure",children:"Branch Structure"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Branch"}),(0,s.jsx)(n.th,{children:"Purpose"}),(0,s.jsx)(n.th,{children:"Rules"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"main"})}),(0,s.jsx)(n.td,{children:"Production-ready, stable code."}),(0,s.jsxs)(n.td,{children:["Only merge from ",(0,s.jsx)(n.code,{children:"dev"})," at the end of a sprint. Tag each release."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"dev"})}),(0,s.jsx)(n.td,{children:"Integration branch for current sprint work."}),(0,s.jsx)(n.td,{children:"All features and fixes branch off here."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"feature/*"})}),(0,s.jsx)(n.td,{children:"Individual new features."}),(0,s.jsxs)(n.td,{children:["Create from ",(0,s.jsx)(n.code,{children:"dev"})," and merge back into ",(0,s.jsx)(n.code,{children:"dev"})," via Pull Request (PR)."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"fix/*"})}),(0,s.jsxs)(n.td,{children:["Bug fixes for ",(0,s.jsx)(n.code,{children:"dev"})," work."]}),(0,s.jsxs)(n.td,{children:["Create from ",(0,s.jsx)(n.code,{children:"dev"})," and merge back into ",(0,s.jsx)(n.code,{children:"dev"})," via PR."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"hotfix/*"})}),(0,s.jsxs)(n.td,{children:["Urgent fixes for ",(0,s.jsx)(n.code,{children:"main"}),"."]}),(0,s.jsxs)(n.td,{children:["Create from ",(0,s.jsx)(n.code,{children:"main"}),", merge into both ",(0,s.jsx)(n.code,{children:"main"})," and ",(0,s.jsx)(n.code,{children:"dev"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"docs"})}),(0,s.jsx)(n.td,{children:"Deployment branch for documentation site (e.g., Docusaurus)."}),(0,s.jsxs)(n.td,{children:["Merges only from ",(0,s.jsx)(n.code,{children:"main"})," after each sprint or doc updates."]})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"why-hybrid",children:"Why hybrid"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Github flow is simpler works for small teams and short timelines but lacks a dev branch"}),"\n",(0,s.jsx)(n.li,{children:"Git flow is very controlled and robust but has too much branch handling and our project is not large enough to make the additional effort worth it\n-We want the simplicity of github flow with the addition of a dev branch to ensure our deployed main branch is always perfect"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"workflow-overview",children:"Workflow Overview"}),"\n",(0,s.jsx)(n.h3,{id:"cloning-the-repository",children:"Cloning the Repository"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/tino-ryan/Muscle-mommies.git\ncd Muscle-mommies\n"})}),"\n",(0,s.jsx)(n.h3,{id:"updating-your-local-copy",children:"Updating Your Local Copy"}),"\n",(0,s.jsxs)(n.p,{children:["Always update your local ",(0,s.jsx)(n.code,{children:"dev"})," before starting work:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"git checkout dev\ngit pull origin dev\n"})}),"\n",(0,s.jsx)(n.h3,{id:"creating-a-feature-branch",children:"Creating a Feature Branch"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"git checkout dev\ngit pull origin dev\ngit checkout -b feature/<short-description>\n"})}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"git checkout -b feature/add-chat-interface\n"})}),"\n",(0,s.jsx)(n.h3,{id:"working-on-your-branch",children:"Working on Your Branch"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Make small, frequent commits."}),"\n",(0,s.jsxs)(n.li,{children:["Follow ",(0,s.jsx)(n.strong,{children:"Conventional Commit"})," format:"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:"feat(scope): short description\nfix(scope): short description\n"})}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'git add .\ngit commit -m "feat(chat): add emoji picker"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"pushing-changes",children:"Pushing Changes"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"git push -u origin feature/<short-description>\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"merging-a-feature-into-dev",children:["Merging a Feature into ",(0,s.jsx)(n.code,{children:"dev"})]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Open a Pull Request (PR) in GitHub from your feature branch into ",(0,s.jsx)(n.code,{children:"dev"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"Request a review."}),"\n",(0,s.jsx)(n.li,{children:"Resolve comments and approve."}),"\n",(0,s.jsx)(n.li,{children:"Merge via GitHub\u2019s interface."}),"\n",(0,s.jsx)(n.li,{children:"Delete the branch after merge."}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"sprint-release-process",children:"Sprint Release Process"}),"\n",(0,s.jsx)(n.p,{children:"At the end of each sprint:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Merge ",(0,s.jsx)(n.code,{children:"dev"})," into ",(0,s.jsx)(n.code,{children:"main"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"git checkout main\ngit pull origin main\ngit merge dev\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Tag the release (Semantic Versioning: MAJOR.MINOR.PATCH):"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'git tag -a v1.1.0 -m "Sprint 1 release: added chat module and store analytics"\ngit push origin v1.1.0\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsxs)(n.li,{children:["Deploy production from ",(0,s.jsx)(n.code,{children:"main"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"hotfix-process",children:"Hotfix Process"}),"\n",(0,s.jsx)(n.p,{children:"If production has a critical bug:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"git checkout main\ngit pull origin main\ngit checkout -b hotfix/fix-login-issue\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Make the fix."}),"\n",(0,s.jsx)(n.li,{children:"Commit and push."}),"\n",(0,s.jsxs)(n.li,{children:["Merge into ",(0,s.jsx)(n.code,{children:"main"})," ",(0,s.jsx)(n.strong,{children:"and"})," ",(0,s.jsx)(n.code,{children:"dev"}),":"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"git checkout main\ngit merge hotfix/fix-login-issue\ngit checkout dev\ngit merge hotfix/fix-login-issue\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Tag and deploy if needed."}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h2,{id:"documentation-deployment-docs-branch",children:["Documentation Deployment (",(0,s.jsx)(n.code,{children:"docs"})," Branch)"]}),"\n",(0,s.jsxs)(n.p,{children:["Our documentation ( Docusaurus) is deployed from the ",(0,s.jsx)(n.code,{children:"docs"})," branch."]}),"\n",(0,s.jsx)(n.h3,{id:"updating-docs",children:"Updating Docs:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Switch to main to get the latest\ngit checkout main\ngit pull origin main\n\n# Switch to docs branch\ngit checkout docs\ngit merge main\n\n# Build and deploy\nnpm run build\ngit push origin docs\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"git-command-reference",children:"Git Command Reference"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Task"}),(0,s.jsx)(n.th,{children:"Command"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Clone repo"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"git clone <url>"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Switch branch"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"git checkout <branch>"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Create new branch"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"git checkout -b <branch>"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Pull latest changes"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"git pull origin <branch>"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Stage changes"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"git add ."})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Commit changes"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'git commit -m "<message>"'})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Push changes"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"git push origin <branch>"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Tag a release"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'git tag -a vX.X.X -m "message"'})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Push tags"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"git push origin vX.X.X"})})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Keep branches small and focused."}),"\n",(0,s.jsx)(n.li,{children:"Commit often with clear messages."}),"\n",(0,s.jsx)(n.li,{children:"Always pull before pushing to avoid conflicts."}),"\n",(0,s.jsx)(n.li,{children:"Use PR reviews to maintain quality."}),"\n",(0,s.jsxs)(n.li,{children:["Keep ",(0,s.jsx)(n.code,{children:"main"})," production-ready at all times."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{})]})}function a(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>t});var r=i(6540);const s={},d=r.createContext(s);function c(e){const n=r.useContext(d);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),r.createElement(d.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7325],{4037:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"Version-control","title":"Version Control","description":"Version Control Setup","source":"@site/docs/Version-control.md","sourceDirName":".","slug":"/Version-control","permalink":"/Muscle-mommies/Version-control","draft":false,"unlisted":false,"editUrl":"https://github.com/tino-ryan/Muscle-mommies/edit/gh-pages/docs/Version-control.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Tech Stack","permalink":"/Muscle-mommies/tech-stack"},"next":{"title":"Git Methodology","permalink":"/Muscle-mommies/git-methodology"}}');var t=i(4848),r=i(8453);const l={},o="Version Control",a={},d=[{value:"Version Control Setup",id:"version-control-setup",level:2},{value:"Why Git and GitHub?",id:"why-git-and-github",level:3},{value:"Issues Faced",id:"issues-faced",level:3},{value:"Pros",id:"pros",level:3},{value:"Cons",id:"cons",level:3},{value:"Linting Setup",id:"linting-setup",level:2},{value:"Tools Used",id:"tools-used",level:3},{value:"Why ESLint and Prettier?",id:"why-eslint-and-prettier",level:3},{value:"Configuration Approach",id:"configuration-approach",level:3},{value:"Issues Faced",id:"issues-faced-1",level:3},{value:"Pros",id:"pros-1",level:3},{value:"Cons",id:"cons-1",level:3},{value:"Usage Instructions",id:"usage-instructions",level:2},{value:"Running Linting",id:"running-linting",level:3},{value:"VSCode Integration",id:"vscode-integration",level:3},{value:"Git Hooks &amp; Automated Linting with Husky",id:"git-hooks--automated-linting-with-husky",level:3},{value:"What We Did",id:"what-we-did",level:4},{value:"Why This Matters",id:"why-this-matters",level:4},{value:"How Team Members Should Use It",id:"how-team-members-should-use-it",level:4},{value:"Semantic Versioning Rules",id:"semantic-versioning-rules",level:2},{value:"Why semantic versioning Rules",id:"why-semantic-versioning-rules",level:3},{value:"Version Tagging \u2013 Detailed Guide",id:"version-tagging--detailed-guide",level:2},{value:"What Counts as a Version Change?",id:"what-counts-as-a-version-change",level:3},{value:"How to Tag in Git",id:"how-to-tag-in-git",level:3},{value:"When to Tag",id:"when-to-tag",level:3},{value:"Pre-Release Tags",id:"pre-release-tags",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"version-control",children:"Version Control"})}),"\n",(0,t.jsx)(n.h2,{id:"version-control-setup",children:"Version Control Setup"}),"\n",(0,t.jsxs)(n.p,{children:["We use ",(0,t.jsx)(n.strong,{children:"Git"})," as our version control system, hosted on ",(0,t.jsx)(n.strong,{children:"GitHub"})," for repository management. Git provides distributed version control with strong branching and merging features. GitHub offers collaborative features like pull requests, issues, and CI/CD integration."]}),"\n",(0,t.jsx)(n.h3,{id:"why-git-and-github",children:"Why Git and GitHub?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Industry standard with wide adoption"}),"\n",(0,t.jsx)(n.li,{children:"Strong community and tooling support"}),"\n",(0,t.jsx)(n.li,{children:"Easy branching, merging, and collaboration"}),"\n",(0,t.jsx)(n.li,{children:"Integration with CI/CD pipelines"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"issues-faced",children:"Issues Faced"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"pros",children:"Pros"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Robust tracking of project history"}),"\n",(0,t.jsx)(n.li,{children:"Facilitates team collaboration"}),"\n",(0,t.jsx)(n.li,{children:"Integrates well with many tools"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"cons",children:"Cons"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Complex commands for beginners"}),"\n",(0,t.jsx)(n.li,{children:"Merge conflicts require manual resolution"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"linting-setup",children:"Linting Setup"}),"\n",(0,t.jsx)(n.h3,{id:"tools-used",children:"Tools Used"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"ESLint"}),": Primary linter for JavaScript and React code"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Prettier"}),": Code formatter integrated with ESLint for consistent styling"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"eslint-plugin-react"}),": React specific linting rules"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"eslint-plugin-prettier"}),": Runs Prettier as an ESLint rule"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"@eslint/js"}),": Base JavaScript config"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"@eslint/markdown"}),": Linting support for Markdown files"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"why-eslint-and-prettier",children:"Why ESLint and Prettier?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"ESLint allows customizable linting rules and supports plugins"}),"\n",(0,t.jsx)(n.li,{children:"Prettier enforces consistent code formatting automatically"}),"\n",(0,t.jsx)(n.li,{children:"Integration between ESLint and Prettier avoids conflicts and streamlines dev workflow"}),"\n",(0,t.jsx)(n.li,{children:"Support for React via plugins"}),"\n",(0,t.jsx)(n.li,{children:"Markdown linting improves documentation quality"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"configuration-approach",children:"Configuration Approach"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Used ESLint flat config with ",(0,t.jsx)(n.code,{children:"eslint.config.mjs"})," for modern config style"]}),"\n",(0,t.jsx)(n.li,{children:"Separate overrides for JS, React, Markdown, and test files"}),"\n",(0,t.jsx)(n.li,{children:"Disabled linting for CSS files as it's out of ESLint scope"}),"\n",(0,t.jsx)(n.li,{children:"Added React version detection in settings for compatibility"}),"\n",(0,t.jsx)(n.li,{children:"Enabled Prettier as an ESLint plugin to catch formatting issues during linting"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"issues-faced-1",children:"Issues Faced"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Initial plugin resolution errors due to mismatched plugin names and config structure"}),"\n",(0,t.jsxs)(n.li,{children:["TypeErrors due to outdated plugin API usage (e.g., ",(0,t.jsx)(n.code,{children:"sourceCode.getAllComments"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:["Nested ",(0,t.jsx)(n.code,{children:"extends"})," not supported in flat config style, required flattening configs"]}),"\n",(0,t.jsxs)(n.li,{children:["Conflicts between ESLint rules and Prettier formatting handled by using ",(0,t.jsx)(n.code,{children:"eslint-config-prettier"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"pros-1",children:"Pros"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Enforces both stylistic and code quality rules"}),"\n",(0,t.jsx)(n.li,{children:"Catches bugs early with static analysis"}),"\n",(0,t.jsx)(n.li,{children:"Prettier integration reduces bike-shedding about code style"}),"\n",(0,t.jsx)(n.li,{children:"Customizable per file type and environment"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"cons-1",children:"Cons"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Initial setup complexity and trial-and-error to get working config"}),"\n",(0,t.jsx)(n.li,{children:"Some learning curve understanding ESLint flat config"}),"\n",(0,t.jsx)(n.li,{children:"Requires developers to use compatible editor integrations or run scripts"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"usage-instructions",children:"Usage Instructions"}),"\n",(0,t.jsx)(n.h3,{id:"running-linting",children:"Running Linting"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Run ",(0,t.jsx)(n.code,{children:"npx eslint ."})," to check linting errors"]}),"\n",(0,t.jsxs)(n.li,{children:["Run ",(0,t.jsx)(n.code,{children:"npx eslint . --fix"})," to auto-fix fixable issues"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"vscode-integration",children:"VSCode Integration"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Install ESLint and Prettier extensions"}),"\n",(0,t.jsxs)(n.li,{children:["Enable ",(0,t.jsx)(n.strong,{children:"Format On Save"})," and ESLint validation in VSCode settings"]}),"\n",(0,t.jsx)(n.li,{children:"Use workspace settings to enforce consistency across team"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"git-hooks--automated-linting-with-husky",children:"Git Hooks & Automated Linting with Husky"}),"\n",(0,t.jsxs)(n.p,{children:["To ensure code quality and consistent styling, we\u2019ve integrated ",(0,t.jsx)(n.strong,{children:"Husky"})," and ",(0,t.jsx)(n.strong,{children:"lint-staged"})," into our Git workflow."]}),"\n",(0,t.jsx)(n.h4,{id:"what-we-did",children:"What We Did"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Installed Husky and lint-staged"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install --save-dev husky lint-staged\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Initialized Husky"})," to enable Git hooks:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npx husky install\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Created a pre-commit hook"})," to run linting and formatting automatically:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'npx husky add .husky/pre-commit "npx lint-staged"\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Configured lint-staged"})," in ",(0,t.jsx)(n.code,{children:"package.json"})," to run ESLint and Prettier on staged files:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'"lint-staged": {\n  "*.{js,jsx,ts,tsx}": ["eslint --fix", "prettier --write"],\n  "*.{json,md}": ["prettier --write"]\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"why-this-matters",children:"Why This Matters"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Enforces code quality"}),": ESLint checks for errors and potential bugs before code is committed."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Ensures consistent styling"}),": Prettier formats code automatically so the whole team follows the same conventions."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Reduces manual steps"}),": Developers no longer need to run ",(0,t.jsx)(n.code,{children:"eslint"})," or ",(0,t.jsx)(n.code,{children:"prettier"})," manually."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Prevents bad code from reaching the repo"}),": Commits fail if linting errors are detected, ensuring ",(0,t.jsx)(n.code,{children:"main"})," and ",(0,t.jsx)(n.code,{children:"dev"})," branches stay clean."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"how-team-members-should-use-it",children:"How Team Members Should Use It"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["After cloning the repo, install dependencies:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npm install\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Enable Husky hooks:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"npx husky install\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Make changes and stage files with:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git add <files>\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["When committing, Husky automatically runs lint-staged:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'git commit -m "Your commit message"\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["If linting errors occur:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Fix the errors indicated by ESLint/Prettier."}),"\n",(0,t.jsx)(n.li,{children:"Stage the fixed files."}),"\n",(0,t.jsx)(n.li,{children:"Commit again."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Note:"})," This ensures that every commit meets our code standards without extra effort from developers."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"semantic-versioning-rules",children:"Semantic Versioning Rules"}),"\n",(0,t.jsxs)(n.p,{children:["Format: ",(0,t.jsx)(n.strong,{children:"MAJOR.MINOR.PATCH"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"MAJOR"}),": Breaking changes."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"MINOR"}),": New features, backwards compatible."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"PATCH"}),": Bug fixes or small changes."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Example progression:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"v1.0.0  \u2192 Sprint 1 release\nv1.1.0  \u2192 Sprint 2 adds features\nv1.1.1  \u2192 Sprint 3 fixes bugs\n"})}),"\n",(0,t.jsx)(n.h3,{id:"why-semantic-versioning-rules",children:"Why semantic versioning Rules"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Brendan Griffiths advised this one during the lecture on 14/08/2024 and the team was not familiar with any other versioning methodologies"}),"\n",(0,t.jsx)(n.li,{children:"Clear and consistent method which can be understood by Devs all around the world"}),"\n",(0,t.jsxs)(n.li,{children:["Helps with planning sprints and releases","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Makes it easier to track which features or fixes are in which sprint"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"version-tagging--detailed-guide",children:"Version Tagging \u2013 Detailed Guide"}),"\n",(0,t.jsxs)(n.p,{children:["We use ",(0,t.jsx)(n.strong,{children:"Semantic Versioning (MAJOR.MINOR.PATCH)"})," to clearly communicate the scope of changes in each release."]}),"\n",(0,t.jsx)(n.h3,{id:"what-counts-as-a-version-change",children:"What Counts as a Version Change?"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"MAJOR"}),"Increase this when we introduce breaking changes \u2014 anything that forces developers or users to change how they use the system."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Changing database schema in a way that breaks old data"}),"\n",(0,t.jsx)(n.li,{children:"Removing or renaming API endpoints"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Reason:"})," Breaking changes require planning for migration, so they must be clearly signaled."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"MINOR"}),"Increase this when we add new features that are backward compatible."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Adding a new dashboard page"}),"\n",(0,t.jsx)(n.li,{children:"Introducing an optional API parameter"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Reason:"})," Signals that the release contains new capabilities but won\u2019t break existing use cases."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"PATCH"}),"Increase this for backward-compatible bug fixes or minor improvements."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Fixing typos in the UI"}),"\n",(0,t.jsx)(n.li,{children:"Patching a security vulnerability without changing the interface"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Reason:"})," Lets the team push out urgent fixes quickly without disrupting feature development."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"how-to-tag-in-git",children:"How to Tag in Git"}),"\n",(0,t.jsx)(n.p,{children:"**Annotated Tag (Recommended)**Includes metadata like author, date, and a description."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'git tag -a v1.0.0 -m "Initial stable release"\ngit push origin v1.0.0\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Lightweight Tag"}),"Just a pointer to a commit (not recommended for official releases)."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git tag v1.0.0\ngit push origin v1.0.0\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"when-to-tag",children:"When to Tag"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"End of each sprint"})," \u2192 Tag the merged ",(0,t.jsx)(n.code,{children:"main"})," branch with a new version."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"After a hotfix"})," \u2192 Tag ",(0,t.jsx)(n.code,{children:"main"})," immediately so the fix is tracked historically."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"For major milestones"})," \u2192 Even if not a sprint end, big completed features can be tagged for reference."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"pre-release-tags",children:"Pre-Release Tags"}),"\n",(0,t.jsx)(n.p,{children:"For versions not yet ready for production but needing tracking:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'git tag -a v1.0.0-beta.1 -m "Beta release for testing"\ngit push origin v1.0.0-beta.1\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>o});var s=i(6540);const t={},r=s.createContext(t);function l(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);
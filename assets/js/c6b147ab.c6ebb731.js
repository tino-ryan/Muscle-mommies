"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7233],{6638:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>d,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"database_documentation","title":"ThriftFinder Firestore Database Documentation","description":"Overview","source":"@site/docs/database_documentation.md","sourceDirName":".","slug":"/database_documentation","permalink":"/Muscle-mommies/database_documentation","draft":false,"unlisted":false,"editUrl":"https://github.com/tino-ryan/Muscle-mommies/edit/gh-pages/docs/database_documentation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"ThriftFinder External API Documentation","permalink":"/Muscle-mommies/api_documentation"},"next":{"title":"User Feedback & Methodology","permalink":"/Muscle-mommies/user-feedback"}}');var a=t(4848),r=t(8453);const o={},i="ThriftFinder Firestore Database Documentation",d={},c=[{value:"Overview",id:"overview",level:2},{value:"Database Setup",id:"database-setup",level:2},{value:"Collections",id:"collections",level:2},{value:"1. <code>users</code>",id:"1-users",level:3},{value:"Structure",id:"structure",level:4},{value:"Purpose",id:"purpose",level:4},{value:"Example",id:"example",level:4}];function l(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.header,{children:(0,a.jsx)(s.h1,{id:"thriftfinder-firestore-database-documentation",children:"ThriftFinder Firestore Database Documentation"})}),"\n",(0,a.jsx)(s.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsxs)(s.p,{children:["ThriftFinder uses ",(0,a.jsx)(s.strong,{children:"Firebase Firestore"})," as its database to manage thrift store data, user interactions, and photo journal entries. The database supports the ThriftFinder app's core functionality (e.g., store management, item listings, reservations, and messaging) and the external API for integration with the Campus Quest project. This documentation describes the Firestore collections, their structure, purpose, and how they enable the application's features and external API endpoints.\nThe database is designed to:"]}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"Store thrift store profiles and their inventory for display in ThriftFinder and as quest locations or advertisements in Campus Quest."}),"\n",(0,a.jsx)(s.li,{children:"Manage user interactions like reservations and messaging."}),"\n",(0,a.jsxs)(s.li,{children:["Support photo uploads for user photo journals via the external API, stored in a separate ",(0,a.jsx)(s.code,{children:"externalImages"})," collection to avoid interference with ThriftFinder\u2019s internal logic."]}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"database-setup",children:"Database Setup"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Database"}),": Google Firebase Firestore (NoSQL, document-based)."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Collections"}),": The database consists of eight main collections: ",(0,a.jsx)(s.code,{children:"users"}),", ",(0,a.jsx)(s.code,{children:"stores"}),", ",(0,a.jsx)(s.code,{children:"items"}),", ",(0,a.jsx)(s.code,{children:"itemImages"}),", ",(0,a.jsx)(s.code,{children:"Reservations"}),", ",(0,a.jsx)(s.code,{children:"chats"}),", ",(0,a.jsx)(s.code,{children:"messages"}),", ",(0,a.jsx)(s.code,{children:"outfits"}),", and an additional ",(0,a.jsx)(s.code,{children:"externalImages"})," collection for the external API."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Environment"}),": Configured via Firebase Admin SDK in the backend (",(0,a.jsx)(s.code,{children:"config/firebase.js"}),"), with credentials stored in environment variables (",(0,a.jsx)(s.code,{children:"FIREBASE_*"})," in ",(0,a.jsx)(s.code,{children:".env"}),")."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Access"}),": The backend (",(0,a.jsx)(s.code,{children:"index.js"}),", ",(0,a.jsx)(s.code,{children:"storeController.js"}),", etc.) uses the Firebase Admin SDK for full read/write access. The external API (",(0,a.jsx)(s.code,{children:"/external/*"}),") provides read-only access to ",(0,a.jsx)(s.code,{children:"stores"})," and read/write access to ",(0,a.jsx)(s.code,{children:"externalImages"})," with API key authentication."]}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"collections",children:"Collections"}),"\n",(0,a.jsxs)(s.h3,{id:"1-users",children:["1. ",(0,a.jsx)(s.code,{children:"users"})]}),"\n",(0,a.jsx)(s.p,{children:"Stores user profile information, including their role (customer or store owner)."}),"\n",(0,a.jsx)(s.h4,{id:"structure",children:"Structure"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Document ID"}),": Firebase UID (e.g., ",(0,a.jsx)(s.code,{children:"dTGCpDOOteSXAq02NirTMZ2EOQk2"}),")"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.strong,{children:"Fields"}),":","\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"createdAt"}),": Timestamp of user creation (Firestore Timestamp, e.g., 18 August 2025 at 21:29:35 UTC+2)"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"email"}),": User\u2019s email address (string, e.g., ",(0,a.jsx)(s.code,{children:"boss@man.com"}),")"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"name"}),": User\u2019s display name (string, e.g., ",(0,a.jsx)(s.code,{children:"boss"}),")"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"role"}),": User role (string, enum: ",(0,a.jsx)(s.code,{children:"customer"})," or ",(0,a.jsx)(s.code,{children:"storeOwner"}),")"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(s.h4,{id:"purpose",children:"Purpose"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"Tracks user accounts and their roles to differentiate between customers and store owners."}),"\n",(0,a.jsxs)(s.li,{children:["Used by ",(0,a.jsx)(s.code,{children:"authController.js"})," for signup and role retrieval (",(0,a.jsx)(s.code,{children:"/api/auth/getRole"}),")."]}),"\n",(0,a.jsxs)(s.li,{children:["Links users to stores (via ",(0,a.jsx)(s.code,{children:"ownerId"})," in ",(0,a.jsx)(s.code,{children:"stores"}),") and reservations/messages (via ",(0,a.jsx)(s.code,{children:"userId"}),", ",(0,a.jsx)(s.code,{children:"senderId"}),", etc.)."]}),"\n"]}),"\n",(0,a.jsx)(s.h4,{id:"example",children:"Example"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-json",children:'{\n  "createdAt": { "_seconds": 1724099375, "_nanoseconds": 0 },\n  "email": "boss@man.com",\n  "name": "boss",\n  "role": "storeOwner"\n}\n2. stores\nStores thrift shop profiles, used for both ThriftFinder\u2019s storefronts and Campus Quest\u2019s quest locations/advertisements.\nStructure\n\nDocument ID: Auto-generated Firestore ID or UUID (e.g., c2e14220-5ebc-4211-9995-b056ad6e852f)\nFields:\n\naddress: Physical address (string, e.g., Wits Sports West Campus, Braamfontein, ...)\ncreatedAt: Creation timestamp (Firestore Timestamp, e.g., 28 August 2025 at 21:37:24 UTC+2)\ndescription: Store description (string, e.g., typical braam thrift shop)\nlocation: Geolocation (map, { lat: number, lng: number }, e.g., { "lat": -26.1869103, "lng": 28.0299083 })\nownerId: Firebase UID of the store owner (string, e.g., dTGCpDOOteSXAq02NirTMZ2EOQk2)\nprofileImageURL: Cloudinary URL for store\u2019s profile image (string, e.g., https://res.cloudinary.com/...)\nstoreId: UUID for the store (string, matches document ID)\nstoreName: Store name (string, e.g., Skull Dugree)\ntheme: Store theme or aesthetic (string, e.g., vintage, streetwear, optional)\nupdatedAt: Last update timestamp (Firestore Timestamp, e.g., 30 September 2025 at 14:39:00 UTC+2)\n\n\nSubcollection: contactInfos\n\nDocument ID: UUID (e.g., 4ac6605e-e6e7-476a-9f46-e10d08d3072a)\nFields:\n\nid: UUID (string, matches document ID)\ntype: Contact type (string, e.g., phone, email, instagram)\nvalue: Contact value (string, e.g., 0667778888)\n\n\n\n\n\nPurpose\n\nStores thrift shop metadata for display in ThriftFinder\u2019s storefronts and Campus Quest\u2019s quest locations/advertisements (GET /external/stores).\nLinks to items, Reservations, chats, and messages via storeId.\nSubcollection contactInfos stores additional contact details (e.g., phone, social media).\nThe theme field allows stores to define their aesthetic, enhancing user browsing experience.\n\nExample\njson{\n  "address": "Wits Sports West Campus, Braamfontein, Johannesburg Ward 60, ...",\n  "createdAt": { "_seconds": 1724879844, "_nanoseconds": 0 },\n  "description": "typical braam thrift shop",\n  "location": { "lat": -26.1869103, "lng": 28.0299083 },\n  "ownerId": "dTGCpDOOteSXAq02NirTMZ2EOQk2",\n  "profileImageURL": "https://res.cloudinary.com/dfkg0topw/image/upload/v1756409843/muscle-mommies/owo3oralfcyucwkdupot.png",\n  "storeId": "c2e14220-5ebc-4211-9995-b056ad6e852f",\n  "storeName": "Skull Dugree",\n  "theme": "vintage",\n  "updatedAt": { "_seconds": 1727698740, "_nanoseconds": 0 }\n}\n3. items\nStores thrift item listings for sale in stores.\nStructure\n\nDocument ID: UUID (e.g., 1f8a7251-342c-409f-aaa2-54c6e5af3ab0)\nFields:\n\ncategory: Item category (string, e.g., footwear)\ncreatedAt: Creation timestamp (Firestore Timestamp, e.g., 28 August 2025 at 11:29:10 UTC+2)\ndepartment: Department (string, e.g., men\'s, women\'s)\ndescription: Item description (string, e.g., cool pair of adidas)\nimages: Array of image metadata (array of maps, { imageId: string, imageURL: string, isPrimary: boolean })\nitemId: UUID (string, matches document ID)\nname: Item name (string, e.g., shoes)\nprice: Item price (number, e.g., 300)\nquantity: Available quantity (number, e.g., 2)\nsize: Item size (string, e.g., 7)\nstatus: Item status (string, enum: Available, Reserved, Out of Stock, e.g., Reserved)\nstoreId: Reference to store (string, e.g., c2e14220-5ebc-4211-9995-b056ad6e852f)\nstyle: Item style (string, e.g., streetwear)\nupdatedAt: Last update timestamp (Firestore Timestamp, e.g., 30 September 2025 at 14:39:00 UTC+2)\n\n\n\nPurpose\n\nStores item listings for ThriftFinder\u2019s inventory management and shopping features.\nLinks to Reservations, chats, and messages via itemId.\nUsed by itemController.js for CRUD operations (/api/items, /api/stores/:storeId/items, etc.).\n\nExample\njson{\n  "category": "footwear",\n  "createdAt": { "_seconds": 1724839750, "_nanoseconds": 0 },\n  "department": "men\'s",\n  "description": "cool pair of adidas",\n  "images": [\n    {\n      "imageId": "8a62996e-86c0-4615-9b08-2220f532ebd1",\n      "imageURL": "https://res.cloudinary.com/dfkg0topw/image/upload/v1756419335/muscle-mommies/i4qzrhv1trdvzb8ehe0c.jpg",\n      "isPrimary": false\n    },\n    {\n      "imageId": "2ce94624-cd8b-493a-894d-910597abe2ca",\n      "imageURL": "https://res.cloudinary.com/dfkg0topw/image/upload/v1756668350/muscle-mommies/lamdqkswsz70xecaauji.webp",\n      "isPrimary": false\n    }\n  ],\n  "itemId": "1f8a7251-342c-409f-aaa2-54c6e5af3ab0",\n  "name": "shoes",\n  "price": 300,\n  "quantity": 2,\n  "size": "7",\n  "status": "Reserved",\n  "storeId": "c2e14220-5ebc-4211-9995-b056ad6e852f",\n  "style": "streetwear",\n  "updatedAt": { "_seconds": 1727698740, "_nanoseconds": 0 }\n}\n4. itemImages\nStores metadata for images associated with items, uploaded to Cloudinary.\nStructure\n\nDocument ID: UUID (e.g., 121d5f7d-818b-4831-9e6f-11ae3c68b7e7)\nFields:\n\nimageId: UUID (string, matches document ID)\nimageURL: Cloudinary URL (string, e.g., https://res.cloudinary.com/...)\nisPrimary: Whether the image is primary (boolean, e.g., false)\nitemId: Reference to item (string, e.g., 58509fa7-5125-412e-b6eb-648fd822cb16)\n\n\n\nPurpose\n\nStores image metadata for item listings, linked to items via itemId.\nPopulated by storeController.js during item creation/update (/api/stores/items, /api/stores/items/:itemId).\nSeparate from externalImages to isolate ThriftFinder\u2019s internal images from Campus Quest\u2019s photo journal uploads.\n\nExample\njson{\n  "imageId": "121d5f7d-818b-4831-9e6f-11ae3c68b7e7",\n  "imageURL": "https://res.cloudinary.com/dfkg0topw/image/upload/v1756419431/muscle-mommies/aw7zglpyl8nx1pnvjist.jpg",\n  "isPrimary": false,\n  "itemId": "58509fa7-5125-412e-b6eb-648fd822cb16"\n}\n5. Reservations\nTracks item reservations made by customers.\nStructure\n\nDocument ID: UUID (e.g., 3cf472eb-f579-4561-8bba-d0b3e3fe9196)\nFields:\n\nitemId: Reference to item (string, e.g., 1f8a7251-342c-409f-aaa2-54c6e5af3ab0)\nreservationId: UUID (string, matches document ID)\nreservedAt: Reservation timestamp (Firestore Timestamp, e.g., 1 September 2025 at 09:37:04 UTC+2)\nstatus: Reservation status (string, enum: Pending, Confirmed, Cancelled, Completed, e.g., Pending)\nstoreId: Reference to store (string, e.g., c2e14220-5ebc-4211-9995-b056ad6e852f)\nupdatedAt: Last update timestamp (Firestore Timestamp, e.g., 30 September 2025 at 14:39:00 UTC+2)\nuserId: Firebase UID of the reserving user (string, e.g., m4lMopagfkbd2RURe9JeralPK4R2)\n\n\n\nPurpose\n\nManages item reservations for ThriftFinder\u2019s order system (/api/stores/reservations, /api/stores/reserve/:itemId).\nLinks to items and stores via itemId and storeId.\nUsed by store owners to confirm/cancel reservations (updateReservation in storeController.js).\n\nExample\njson{\n  "itemId": "1f8a7251-342c-409f-aaa2-54c6e5af3ab0",\n  "reservationId": "3cf472eb-f579-4561-8bba-d0b3e3fe9196",\n  "reservedAt": { "_seconds": 1725178624, "_nanoseconds": 0 },\n  "status": "Pending",\n  "storeId": "c2e14220-5ebc-4211-9995-b056ad6e852f",\n  "updatedAt": { "_seconds": 1727698740, "_nanoseconds": 0 },\n  "userId": "m4lMopagfkbd2RURe9JeralPK4R2"\n}\n6. chats\nStores conversation metadata between users (e.g., customer and store owner).\nStructure\n\nDocument ID: Concatenated Firebase UIDs (e.g., dTGCpDOOteSXAq02NirTMZ2EOQk2_m4lMopagfkbd2RURe9JeralPK4R2)\nFields:\n\nchatId: Concatenated UIDs (string, matches document ID)\nitemId: Reference to item (string, optional, e.g., 1f8a7251-342c-409f-aaa2-54c6e5af3ab0)\nlastMessage: Most recent message text (string, e.g., Condition is excellent.)\nlastTimestamp: Timestamp of last message (Firestore Timestamp, e.g., 30 September 2025 at 14:39:00 UTC+2)\nparticipants: Array of Firebase UIDs (array of strings, e.g., ["dTGCpDOOteSXAq02NirTMZ2EOQk2", "m4lMopagfkbd2RURe9JeralPK4R2"])\nstoreId: Reference to store (string, optional, e.g., c2e14220-5ebc-4211-9995-b056ad6e852f)\n\n\n\nPurpose\n\nTracks conversations for ThriftFinder\u2019s in-app messaging (/api/stores/chats, /api/stores/messages).\nLinks to messages, items, and stores via chatId, itemId, and storeId.\nPopulated when users send messages or create chats (sendMessage, createChat in storeController.js).\n\nExample\njson{\n  "chatId": "dTGCpDOOteSXAq02NirTMZ2EOQk2_m4lMopagfkbd2RURe9JeralPK4R2",\n  "itemId": "1f8a7251-342c-409f-aaa2-54c6e5af3ab0",\n  "lastMessage": "Condition is excellent.",\n  "lastTimestamp": { "_seconds": 1727698740, "_nanoseconds": 0 },\n  "participants": [\n    "dTGCpDOOteSXAq02NirTMZ2EOQk2",\n    "m4lMopagfkbd2RURe9JeralPK4R2"\n  ],\n  "storeId": "c2e14220-5ebc-4211-9995-b056ad6e852f"\n}\n7. messages\nStores individual messages within conversations.\nStructure\n\nDocument ID: Auto-generated Firestore ID (e.g., 92mnQMtLGwz1plHns8hK)\nFields:\n\nchatId: Reference to chat (string, e.g., dTGCpDOOteSXAq02NirTMZ2EOQk2_m4lMopagfkbd2RURe9JeralPK4R2)\nitemId: Reference to item (string, optional, e.g., 1f8a7251-342c-409f-aaa2-54c6e5af3ab0)\nmessage: Message text (string, e.g., Reservation request for shoes)\nread: Whether the message was read (boolean, e.g., true)\nreceiverId: Firebase UID of recipient (string, e.g., dTGCpDOOteSXAq02NirTMZ2EOQk2)\nsenderId: Firebase UID of sender (string, e.g., m4lMopagfkbd2RURe9JeralPK4R2)\nstoreId: Reference to store (string, optional, e.g., c2e14220-5ebc-4211-9995-b056ad6e852f)\ntimestamp: Message timestamp (Firestore Timestamp, e.g., 30 September 2025 at 14:39:00 UTC+2)\n\n\n\nPurpose\n\nStores message history for ThriftFinder\u2019s chat feature (/api/stores/chats/:chatId/messages).\nLinks to chats, items, and stores via chatId, itemId, and storeId.\nSupports read receipts (markAsRead in storeController.js).\n\nExample\njson{\n  "chatId": "dTGCpDOOteSXAq02NirTMZ2EOQk2_m4lMopagfkbd2RURe9JeralPK4R2",\n  "itemId": "1f8a7251-342c-409f-aaa2-54c6e5af3ab0",\n  "message": "Reservation request for shoes",\n  "read": true,\n  "receiverId": "dTGCpDOOteSXAq02NirTMZ2EOQk2",\n  "senderId": "m4lMopagfkbd2RURe9JeralPK4R2",\n  "storeId": "c2e14220-5ebc-4211-9995-b056ad6e852f",\n  "timestamp": { "_seconds": 1727698740, "_nanoseconds": 0 }\n}\n8. outfits\nStores user-created outfit combinations from selected items.\nStructure\n\nDocument ID: UUID (e.g., a1b2c3d4-e5f6-4123-8a9b-0c1d2e3f4g5h)\nFields:\n\noutfitId: UUID (string, matches document ID)\nuserId: Firebase UID of the user (string, e.g., m4lMopagfkbd2RURe9JeralPK4R2)\nitems: Array of item IDs (array of strings, e.g., ["1f8a7251-342c-409f-aaa2-54c6e5af3ab0", "58509fa7-5125-412e-b6eb-648fd822cb16"])\nname: Outfit name (string, e.g., Casual Friday)\ncreatedAt: Creation timestamp (Firestore Timestamp, e.g., 30 September 2025 at 14:39:00 UTC+2)\nupdatedAt: Last update timestamp (Firestore Timestamp, e.g., 30 September 2025 at 14:39:00 UTC+2)\n\n\n\nPurpose\n\nAllows users to save and manage outfits composed of items from various stores.\nLinks to items via itemId and users via userId.\nUsed by outfitController.js for CRUD operations (/api/outfits, /api/outfits).\n\nExample\njson{\n  "outfitId": "a1b2c3d4-e5f6-4123-8a9b-0c1d2e3f4g5h",\n  "userId": "m4lMopagfkbd2RURe9JeralPK4R2",\n  "items": ["1f8a7251-342c-409f-aaa2-54c6e5af3ab0", "58509fa7-5125-412e-b6eb-648fd822cb16"],\n  "name": "Casual Friday",\n  "createdAt": { "_seconds": 1727698740, "_nanoseconds": 0 },\n  "updatedAt": { "_seconds": 1727698740, "_nanoseconds": 0 }\n}\n9. externalImages\nStores metadata for photos uploaded via the external API (POST /external/upload) for Campus Quest\u2019s photo journal feature.\nStructure\n\nDocument ID: Cloudinary public ID (e.g., muscle-mommies/external/abc123)\nFields:\n\nimageId: Cloudinary public ID (string, matches document ID)\nimageURL: Cloudinary URL (string, e.g., https://res.cloudinary.com/...)\ncreatedAt: Upload timestamp (Firestore Timestamp, e.g., 30 September 2025 at 14:39:00 UTC+2)\n\n\n\nPurpose\n\nStores metadata for photos uploaded by Campus Quest users, separate from itemImages to avoid interference with ThriftFinder\u2019s internal logic.\nPopulated by externalController.js (uploadPhoto) and retrieved via GET /external/photos.\nSupports Campus Quest\u2019s photo journal feature, allowing users to upload quest-related images (e.g., thrift finds).\n\nExample\njson{\n  "imageId": "muscle-mommies/external/abc123",\n  "imageURL": "https://res.cloudinary.com/dfkg0topw/image/upload/v1756419431/muscle-mommies/external/abc123.jpg",\n  "createdAt": { "_seconds": 1727698740, "_nanoseconds": 0 }\n}\nWhy This Setup?\n\nFirestore Choice: Firestore\u2019s NoSQL structure supports flexible schemas, real-time updates, and scalability, ideal for ThriftFinder\u2019s dynamic data (stores, items, chats) and Campus Quest\u2019s integration needs.\nSeparation of Concerns:\n\nusers, stores, items, itemImages, Reservations, chats, messages, and outfits support ThriftFinder\u2019s core functionality (storefronts, inventory, messaging, reservations, outfit creation).\nexternalImages isolates Campus Quest\u2019s photo journal uploads to prevent conflicts with ThriftFinder\u2019s itemImages.\n\n\nRelationships:\n\nstoreId links stores to items, Reservations, chats, and messages.\nitemId links items to itemImages, Reservations, chats, messages, and outfits.\nuserId and ownerId link users to reservations, stores, and outfits.\nchatId links chats to messages.\n\n\nExternal API Support:\n\nstores is exposed via GET /external/stores (public) for Campus Quest to use as quest locations or ads.\nexternalImages supports POST /external/upload and GET /external/photos (API key secured) for photo journal management.\n\n\nScalability: Firestore\u2019s automatic scaling handles growing data. The externalImages collection uses Cloudinary public IDs as document IDs to avoid collisions and simplify lookups.\n\nHow It Works\n\nThriftFinder App:\n\nUsers sign up (authController.js) and are stored in users.\nStore owners create/update stores (createOrUpdateStore), populating stores and contactInfos.\nItems are added/updated (createItem, updateItem), stored in items with images in itemImages.\nCustomers reserve items (customerReserve), creating entries in Reservations and triggering messages in chats and messages.\nUsers create outfits (saveOutfit), stored in outfits.\nMessages are sent (sendMessage) and tracked (markAsRead) in chats and messages.\n\n\nExternal API for Campus Quest:\n\nGET /external/stores: Retrieves all stores documents, used for quest locations or advertisements. No authentication needed to maximize exposure.\nPOST /external/upload: Uploads photos to Cloudinary (in muscle-mommies/external folder) and stores metadata in externalImages. Requires API key for security.\nGET /external/photos: Retrieves all externalImages documents for photo journal display. Requires API key.\n\n\nData Flow:\n\nStore Creation: stores \u2192 contactInfos (optional).\nItem Listing: items \u2192 itemImages (via Cloudinary uploads).\nReservation: items (update status) \u2192 Reservations \u2192 chats/messages (notification to store owner).\nMessaging: chats (conversation metadata) \u2192 messages (individual messages).\nOutfit Creation: outfits (links to items and users).\nPhoto Journal: External client uploads photo \u2192 Cloudinary \u2192 externalImages.\n\n\n\nUsage Notes\n\nAccess: The backend uses Firebase Admin SDK with full access. The external API restricts externalImages access to API key holders (validateApiKey in externalController.js).\nSecurity:\n\nFirebase Security Rules should restrict read/write access to authenticated users for users, stores, items, etc., except for stores (public read for /external/stores).\nexternalImages is write-protected by API key in the backend, but Firestore rules should further limit access.\n\n\nCampus Quest Integration:\n\nUse stores data for quest locations (e.g., map location.lat, location.lng).\nUse externalImages for photo journals, storing/retrieving quest-related images.\nShare the API key securely with the Campus Quest team for /external/upload and /external/photos.\n\n\nMaintenance:\n\nMonitor Firestore usage (reads/writes) to optimize costs.\nPeriodically clean up externalImages if unused photos accumulate (e.g., implement a TTL policy).\nEnsure Cloudinary folder muscle-mommies/external is monitored for storage limits.\n\n\nNew Features:\n\nThe theme field in stores can be used to filter or categorize stores in the UI.\nThe outfits collection enables personalized user experiences, linking to existing items.\n\n\n\nExample Data Flow\n\nStore Owner Adds Item:\n\nCreates store in stores (c2e14220-5ebc-4211-9995-b056ad6e852f) with theme vintage.\nAdds item (1f8a7251-342c-409f-aaa2-54c6e5af3ab0) to items with images in itemImages.\n\n\nCustomer Creates Outfit:\n\nSaves outfit in outfits (a1b2c3d4-e5f6-4123-8a9b-0c1d2e3f4g5h) with items from multiple stores.\n\n\nCustomer Reserves Item:\n\nTriggers customerReserve, creating a Reservations entry (3cf472eb-f579-4561-8bba-d0b3e3fe9196).\nUpdates items.status to Reserved.\nCreates a chats entry and sends a messages entry (92mnQMtLGwz1plHns8hK).\n\n\nCampus Quest Uses API:\n\nCalls GET /external/stores to get store data for quests.\nUploads a photo via POST /external/upload, storing metadata in externalImages.\n\n\n\nNotes\n\nIndexes: Ensure Firestore composite indexes are set for queries (e.g., chats.participants, items.storeId, Reservations.userId, outfits.userId). Check the Firestore console for index errors.\nBackups: Use Firebase\u2019s export feature to back up data regularly.\nCampus Quest Collaboration: Share this documentation and the API key with the Campus Quest team. Discuss additional needs (e.g., filtering stores by location or linking photos to quests).\n'})})]})}function m(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>o,x:()=>i});var n=t(6540);const a={},r=n.createContext(a);function o(e){const s=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(r.Provider,{value:s},e.children)}}}]);